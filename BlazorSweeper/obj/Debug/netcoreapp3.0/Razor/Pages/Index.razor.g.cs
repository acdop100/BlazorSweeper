#pragma checksum "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "42c8bacf7967e7c5ca25a8e2f61b148946e9b346"
// <auto-generated/>
#pragma warning disable 1591
namespace BlazorSweeper.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\_Imports.razor"
using Microsoft.AspNetCore.Components.Layouts;

#line default
#line hidden
#line 4 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 5 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\_Imports.razor"
using BlazorSweeper;

#line default
#line hidden
#line 7 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\_Imports.razor"
using BlazorSweeper.Shared;

#line default
#line hidden
#line 2 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
using BlazorSweeper.Data;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
            builder.OpenElement(0, "body");
            builder.AddMarkupContent(1, "\r\n    ");
            builder.OpenElement(2, "div");
            builder.AddAttribute(3, "class", "sidenav");
            builder.AddAttribute(4, "style", "width: 270px;");
            builder.AddMarkupContent(5, "\r\n        ");
            builder.OpenElement(6, "h5");
            builder.AddContent(7, 
#line 6 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
             BannerText

#line default
#line hidden
            );
            builder.CloseElement();
            builder.AddMarkupContent(8, "\r\n\r\n        ");
            builder.OpenElement(9, "button");
            builder.AddAttribute(10, "type", "button");
            builder.AddAttribute(11, "class", "btn botBtn btn-primary");
            builder.AddAttribute(12, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, 
#line 8 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
                                                                        NewGame

#line default
#line hidden
            ));
            builder.AddContent(13, "New Game");
            builder.CloseElement();
            builder.AddMarkupContent(14, "\r\n\r\n        ");
            builder.AddMarkupContent(15, "<p>Click on the squares to activate them, but don\'t click on a mine!</p>\r\n        ");
            builder.AddMarkupContent(16, "<p>CTRL + click to flag a square. Flag all mines to win!</p>\r\n        ");
            builder.AddMarkupContent(17, "<p>The number of mines is randomized between 15-25 each game.</p>\r\n    ");
            builder.CloseElement();
            builder.AddMarkupContent(18, "\r\n\r\n    ");
            builder.OpenElement(19, "div");
            builder.AddAttribute(20, "class", "container");
            builder.AddAttribute(21, "style", "opacity:" + (
#line 15 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
                                           GameDisplay

#line default
#line hidden
            ) + ";" + " margin:" + " 30px" + " auto");
            builder.AddMarkupContent(22, "\r\n");
#line 16 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
         for (int i = 0; i < 10; i++)
        {

#line default
#line hidden
            builder.AddContent(23, "            ");
            builder.OpenElement(24, "div");
            builder.AddAttribute(25, "class", "row");
            builder.AddMarkupContent(26, "\r\n");
#line 19 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
                 for (int j = 0; j < 10; j++)
                {
                    var temp = ThisBoard.BoardSpace[i, j];

#line default
#line hidden
            builder.AddContent(27, "                    ");
            builder.OpenElement(28, "a");
            builder.AddAttribute(29, "class", "col-sm");
            builder.AddAttribute(30, "value", 
#line 22 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
                                              temp

#line default
#line hidden
            );
            builder.AddAttribute(31, "style", "background-color:" + " " + (
#line 22 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
                                                                              ThisBoard.BoardSpace[i, j].Color

#line default
#line hidden
            ) + ";" + " height:" + " 80px;" + " width:" + " 80px;" + " border:" + " solid");
            builder.AddAttribute(32, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.UIMouseEventArgs>(this, 
#line 22 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
                                                                                                                                                                      e => MakeMove(e, temp)

#line default
#line hidden
            ));
            builder.AddMarkupContent(33, "\r\n                        ");
            builder.OpenElement(34, "h3");
            builder.AddAttribute(35, "style", "text-align: center; margin: 20px auto;");
            builder.AddContent(36, 
#line 23 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
                                                                            ThisBoard.BoardSpace[i, j].KnownNeighbors

#line default
#line hidden
            );
            builder.CloseElement();
            builder.AddMarkupContent(37, "\r\n                    ");
            builder.CloseElement();
            builder.AddMarkupContent(38, "\r\n");
#line 25 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
                }

#line default
#line hidden
            builder.AddContent(39, "            ");
            builder.CloseElement();
            builder.AddMarkupContent(40, "\r\n");
#line 27 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
        }

#line default
#line hidden
            builder.AddContent(41, "    ");
            builder.CloseElement();
            builder.AddMarkupContent(42, "\r\n");
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 31 "C:\Users\p3yoc\source\repos\BlazorSweeper\BlazorSweeper\Pages\Index.razor"
       

Board ThisBoard;
bool GameOver;
string BannerText;
double GameDisplay;
int Neighbors;

override protected void OnInit()
{
    NewGame();
}

public void NewGame()
{
    BannerText = "Welcome To BlazorSweeper";
    ThisBoard = new Board();
    GameOver = false;
    GameDisplay = 1;
}

private void MakeMove(UIMouseEventArgs click, Spaces space)
{

    // Left clicking on a non-flagged square will open it.
    if ((click.Button == 0) && (!click.CtrlKey) && (!space.Flagged))
    {
        if (space.HasMine)
        {
            BannerText = "You lost.";
            GameOver = true;
            GameDisplay = 0.5;
            space.Color = "red;";

            // Turn all mines red, even ones not clicked. If you flagged a mine, it turns green, but if you flag a bad space it turns purple.
            for (int i = 0; i < 10; i++)
            {
                for (int j = 0; j < 10; j++)
                {
                    if (ThisBoard.BoardSpace[i, j].HasMine)
                    {
                        ThisBoard.BoardSpace[i, j].Color = "red;";
                    }
                    if (ThisBoard.BoardSpace[i, j].Flagged)
                    {
                        if (ThisBoard.BoardSpace[i, j].HasMine)
                        {
                            ThisBoard.BoardSpace[i, j].Color = "green;";
                        }
                        else
                        {
                            ThisBoard.BoardSpace[i, j].Color = "purple;";
                        }
                    }
                }
            }
        }
        else
        {
            CheckNeighbors(space);
        }
    }
    // Right clicking flags the square.
    else if (click.Button == 0 && click.CtrlKey)
    {
        if (space.Flagged)
        {
            space.Flagged = false;
            space.Color = "gray;";
            if (space.HasMine)
            {
                ThisBoard.FlagNums--;
            }
        }
        else
        {
            space.Flagged = true;
            space.Color = "blue;";

            if (space.HasMine)
            {
                ThisBoard.FlagNums++;
            }

            if (ThisBoard.FlagNums == ThisBoard.MineNums)
            {
                GameOver = true;
                BannerText = "You Won!";
                GameDisplay = 0.5;
                for (int i = 0; i < 10; i++)
                {
                    for (int j = 0; j < 10; j++)
                    {
                        if (ThisBoard.BoardSpace[i, j].Flagged)
                        {
                            ThisBoard.BoardSpace[i, j].Color = "green;";
                        }
                    }
                }
            }
        }

    }
}

// This function checks all of the clicked space's neighbors to see how many neighbors have bombs.
private void CheckNeighbors(Spaces space)
{
    Neighbors = 0;

    if (space.Y - 1 >= 0)
    {
        if (space.X - 1 >= 0)
        {
            CheckSpecificNeighbor(ThisBoard.BoardSpace[space.X - 1, space.Y - 1], space);
        }
        if (space.X >= 0)
        {
            CheckSpecificNeighbor(ThisBoard.BoardSpace[space.X, space.Y - 1], space);
        }
        if (space.X + 1 < 10)
        {
            CheckSpecificNeighbor(ThisBoard.BoardSpace[space.X + 1, space.Y - 1], space);
        }
    }
    if (space.Y >= 0)
    {
        if (space.X - 1 >= 0)
        {
            CheckSpecificNeighbor(ThisBoard.BoardSpace[space.X - 1, space.Y], space);
        }
        if (space.X + 1 < 10)
        {
            CheckSpecificNeighbor(ThisBoard.BoardSpace[space.X + 1, space.Y], space);
        }

    }
    if (space.Y + 1 < 10)
    {
        if (space.X - 1 >= 0)
        {
            CheckSpecificNeighbor(ThisBoard.BoardSpace[space.X - 1, space.Y + 1], space);
        }
        if (space.X >= 0)
        {
            CheckSpecificNeighbor(ThisBoard.BoardSpace[space.X, space.Y + 1], space);
        }
        if (space.X + 1 < 10)
        {
            CheckSpecificNeighbor(ThisBoard.BoardSpace[space.X + 1, space.Y + 1], space);
        }
    }

    space.KnownNeighbors = Neighbors.ToString();
    space.Color = "white;";
    space.Checked = true;

    // If the square had zero neighbors with mines, then go ahead and check all of those.
    if (Neighbors == 0)
    {
        foreach (Spaces spaces in space.NeighborSpaces)
        {
            // Check to see if the neighbor of the zero square has already been checked, otherwise the recursion will never end.
            if ((spaces.Checked == false) && (spaces.Flagged == false))
            {
                CheckNeighbors(spaces);
            }
        }
    }
}

private void CheckSpecificNeighbor(Spaces TempSpace, Spaces space)
{
    if (TempSpace.HasMine)
    {
        Neighbors++;
    }
    else
    {
        space.NeighborSpaces.Add(TempSpace);
    }
}


#line default
#line hidden
    }
}
#pragma warning restore 1591
